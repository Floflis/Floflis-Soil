About the 3 install.sh files and to-merge.sh: what is happening that WINE's user is root? What's my issue of using sudo/chroot here?








t seems that the script is setting the variable maysudo to "sudo" if the user is not root, and empty if the user is root. This variable is then used to execute commands with elevated privileges. As for the issue with WINE's user being root, it's not entirely clear from the provided context. However, using sudo or chroot in the context of WINE can lead to issues with file permissions and may not work as expected. It's generally recommended to avoid running WINE as root or using sudo/chroot with WINE.









How to install WINE from a chroot environment like Cubic, but without setting root as user?









To install WINE from a chroot environment like Cubic without setting root as the user, you can follow these steps:

1. Enter the chroot environment using Cubic.
2. Update the package lists:

   apt update
   
3. Install WINE using the following command:

   apt install wine
   
4. After the installation is complete, you can exit the chroot environment and continue with any additional configuration or setup required for WINE.

By following these steps, you can install WINE within the chroot environment without setting root as the user.











"apt install wine"

Isn't that exactly what $maysudo should do in chroot?












Yes, using $maysudo apt install wine within the chroot environment is the correct approach. The $maysudo variable is used to execute commands with elevated privileges, so $maysudo apt install wine will install WINE with the necessary permissions in the chroot environment. This is the appropriate way to handle privilege escalation within the script.









So why on Earth WINE can run only via sudo in the final distro? Eg. "sudo wine64 {something}.exe??"









The reason WINE needs to be run with sudo in the final distro is likely due to file permissions and access to system resources. WINE often needs to interact with system files and settings that require elevated privileges, and running it with sudo allows it to access these resources.

However, running WINE with sudo can lead to potential security risks and file permission issues. It's generally recommended to avoid running WINE with sudo whenever possible. Instead, you can adjust the file permissions and ownership to allow WINE to run without sudo while maintaining the necessary access to system resources.

To address this issue, you may need to review the file permissions and ownership of the WINE-related files and directories, ensuring that the appropriate user has the necessary access without requiring sudo.
